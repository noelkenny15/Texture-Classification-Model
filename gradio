!pip install gradio
import torch
import timm
import torch.nn as nn
import gradio as gr
from torchvision import transforms
from PIL import Image
from torchvision import datasets


device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


model = timm.create_model('resnext101_32x8d', pretrained=False)
model.fc = nn.Linear(model.get_classifier().in_features, 47)
model = model.to(device)


model.load_state_dict(torch.load('/content/drive/MyDrive/resnext101.pth', map_location=device))
model.eval()


transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])
])
dataset = datasets.ImageFolder(root='/content/drive/MyDrive/dtd/images')
class_names = dataset.classes


def predict(image):
    image = image.convert('RGB')
    img = transform(image).unsqueeze(0).to(device)

    with torch.no_grad():
        outputs = model(img)
        _, predicted = torch.max(outputs, 1)
        predicted_class = class_names[predicted.item()]

    return predicted_class


iface = gr.Interface(
    fn=predict,
    inputs=gr.Image(type="pil"),
    outputs="text",
    title="DTD Image Classifier",
    description="Upload an image to predict its class using ResNeXt101!",
)


if __name__ == "__main__":
    iface.launch(share=True)
